#include <iostream>     
#include <omp.h>        
#include <climits>      

using namespace std;


void findMin(int arr[], int n) {
    int min_val = INT_MAX; 


    #pragma omp parallel for reduction(min:min_val)
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_val)
            min_val = arr[i];
    }

    cout << "Minimum value: " << min_val << endl;
}


void findMax(int arr[], int n) {
    int max_val = INT_MIN;  

    #pragma omp parallel for reduction(max:max_val)
    for (int i = 0; i < n; i++) {
        if (arr[i] > max_val)
            max_val = arr[i];
    }

    cout << "Maximum value: " << max_val << endl;
}

void findSum(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];  
    }

    cout << "Sum: " << sum << endl;
}


void findAverage(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    double avg = (double)sum / n;  
    cout << "Average: " << avg << endl;
}

int main() {
    int n;

    cout << "Enter number of elements: ";
    cin >> n;

    int* arr = new int[n];  

    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];  
    }


    findMin(arr, n);
    findMax(arr, n);
    findSum(arr, n);
    findAverage(arr, n);

    delete[] arr; 
    return 0;
}

#include <iostream>     // For input and output
#include <omp.h>        // For using OpenMP (parallel programming)
#include <climits>      // For INT_MAX and INT_MIN

using namespace std;

// Function to find the minimum value in the array using OpenMP reduction
void findMin(int arr[], int n) {
    int min_val = INT_MAX;  // Start with the largest possible integer

    // Parallel loop to reduce the minimum value
    #pragma omp parallel for reduction(min:min_val)
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_val)
            min_val = arr[i];
    }

    cout << "Minimum value: " << min_val << endl;
}

// Function to find the maximum value in the array using OpenMP reduction
void findMax(int arr[], int n) {
    int max_val = INT_MIN;  // Start with the smallest possible integer

    #pragma omp parallel for reduction(max:max_val)
    for (int i = 0; i < n; i++) {
        if (arr[i] > max_val)
            max_val = arr[i];
    }

    cout << "Maximum value: " << max_val << endl;
}

// Function to find the sum of elements using OpenMP reduction
void findSum(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];  // Add each element to sum
    }

    cout << "Sum: " << sum << endl;
}

// Function to find the average of elements
void findAverage(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    double avg = (double)sum / n;  // Cast to double for decimal value
    cout << "Average: " << avg << endl;
}

int main() {
    int n;

    cout << "Enter number of elements: ";
    cin >> n;

    int* arr = new int[n];  // Dynamically allocate array

    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];  // Take array input from user
    }

    // Call functions to compute values in parallel
    findMin(arr, n);
    findMax(arr, n);
    findSum(arr, n);
    findAverage(arr, n);

    delete[] arr;  // Free dynamically allocated memory
    return 0;
}
